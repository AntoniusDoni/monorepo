basePath: /
definitions:
  contract.LoginRequest:
    properties:
      password:
        example: securepassword123
        type: string
      username:
        example: superadmin
        type: string
    required:
    - password
    - username
    type: object
  contract.LoginResponse:
    properties:
      role:
        type: string
      token:
        type: string
      user_identifier:
        type: integer
    type: object
  contract.RegisterRequest:
    properties:
      email:
        type: string
      office_id:
        type: string
      password:
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - office_id
    - password
    - username
    type: object
  contract.RegisterResponse:
    properties:
      message:
        type: string
    type: object
  contract.RegisterWithOfficeRequest:
    properties:
      email:
        type: string
      office_address:
        type: string
      office_city:
        type: string
      office_code:
        description: Office fields
        maxLength: 10
        minLength: 2
        type: string
      office_name:
        maxLength: 100
        minLength: 3
        type: string
      office_phone:
        type: string
      password:
        minLength: 6
        type: string
      username:
        description: User fields
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - office_code
    - office_name
    - password
    - username
    type: object
  contract.RegisterWithOfficeResponse:
    properties:
      message:
        type: string
      office_id:
        type: string
      user_id:
        type: integer
    type: object
  dto.CategoryProductCreateRequest:
    properties:
      name:
        description: Category name
        example: Precursor
        type: string
      parent_id:
        description: example:"123e4567-e89b-12d3-a456-426614174000"
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - name
    - parent_id
    type: object
  dto.ProductCreateRequest:
    properties:
      category_id:
        description: Foreign key to category
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      code:
        description: Product code or SKU
        example: PROD001
        type: string
      content_per_large_unit:
        description: e.g., 12 pieces per box
        example: 12
        minimum: 1
        type: integer
      indication:
        description: Description or usage
        example: High-performance laptop for professionals
        type: string
      large_unit:
        description: e.g., box, pack
        example: box
        type: string
      name:
        description: Product name
        example: Laptop Dell XPS 13
        type: string
      purchase_price:
        description: Cost price
        example: 500
        minimum: 0
        type: number
      selling_price:
        description: Sale price
        example: 750
        minimum: 0
        type: number
      small_unit:
        description: e.g., piece, tablet
        example: piece
        type: string
    required:
    - category_id
    - code
    - content_per_large_unit
    - large_unit
    - name
    - purchase_price
    - selling_price
    - small_unit
    type: object
  dto.ProductUpdateRequest:
    properties:
      category_id:
        description: Foreign key to category
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      code:
        description: Product code or SKU
        example: PROD001
        type: string
      content_per_large_unit:
        description: e.g., 12 pieces per box
        example: 12
        minimum: 1
        type: integer
      indication:
        description: Description or usage
        example: High-performance laptop for professionals
        type: string
      large_unit:
        description: e.g., box, pack
        example: box
        type: string
      name:
        description: Product name
        example: Laptop Dell XPS 13
        type: string
      purchase_price:
        description: Cost price
        example: 500
        minimum: 0
        type: number
      selling_price:
        description: Sale price
        example: 750
        minimum: 0
        type: number
      small_unit:
        description: e.g., piece, tablet
        example: piece
        type: string
    required:
    - category_id
    - code
    - content_per_large_unit
    - large_unit
    - name
    - purchase_price
    - selling_price
    - small_unit
    type: object
  model.Branch:
    properties:
      address:
        type: string
      city:
        type: string
      code:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      office:
        $ref: '#/definitions/model.Office'
      office_id:
        type: string
      phone:
        type: string
      status:
        type: string
      updated_at:
        type: string
      warehouses:
        items:
          $ref: '#/definitions/model.Warehouse'
        type: array
    type: object
  model.CategoryProduct:
    properties:
      created_at:
        description: Timestamp when created
        type: string
      id:
        description: Unique identifier
        type: string
      name:
        description: Category name
        type: string
      parent_id:
        description: Parent category ID
        type: string
      updated_at:
        description: Timestamp when updated
        type: string
    type: object
  model.Office:
    properties:
      address:
        type: string
      branches:
        items:
          $ref: '#/definitions/model.Branch'
        type: array
      city:
        type: string
      code:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      status:
        description: e.g., active, inactive
        type: string
      updated_at:
        type: string
    type: object
  model.Product:
    properties:
      category:
        $ref: '#/definitions/model.CategoryProduct'
      category_id:
        description: Foreign key
        type: string
      code:
        description: Product code or SKU
        type: string
      content_per_large_unit:
        description: e.g., 12 pieces per box
        type: integer
      created_at:
        description: Timestamp when created
        type: string
      id:
        description: Unique identifier
        type: string
      indication:
        description: Description or usage
        type: string
      large_unit:
        description: e.g., box, pack
        type: string
      name:
        description: Product name
        type: string
      purchase_price:
        description: Cost price
        type: number
      selling_price:
        description: Sale price
        type: number
      small_unit:
        description: e.g., piece, tablet
        type: string
      updated_at:
        description: Timestamp when updated
        type: string
    type: object
  model.UnitProduct:
    properties:
      code:
        description: Product code or SKU
        type: string
      created_at:
        description: Timestamp when created
        type: string
      id:
        description: Unique identifier
        type: string
      name:
        description: Product name
        type: string
      updated_at:
        description: Timestamp when updated
        type: string
    type: object
  model.Warehouse:
    properties:
      address:
        type: string
      branch_id:
        description: nullable for now
        type: string
      code:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      office_id:
        description: nullable for now
        type: string
      phone:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
  description: API documentation for your monorepo services
  title: Your Monorepo API
  version: "1.0"
paths:
  /admin/health:
    get:
      consumes:
      - application/json
      description: Returns the health status of the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Health check endpoint
      tags:
      - admin
  /admin/seed:
    post:
      consumes:
      - application/json
      description: Executes the database seeder to populate initial data including
        sample warehouses, products, and unit products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Run database seeder
      tags:
      - admin
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.LoginResponse'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
      summary: User login
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with an existing office ID
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/contract.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            type: object
      summary: Register a new user
      tags:
      - auth
  /register-with-office:
    post:
      consumes:
      - application/json
      description: Create a new office and register the first user for that office
        in a single operation
      parameters:
      - description: Registration with office request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.RegisterWithOfficeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/contract.RegisterWithOfficeResponse'
        "400":
          description: Bad Request
          schema:
            type: object
      summary: Register a new user with office creation
      tags:
      - auth
  /v1/api/category-products:
    get:
      consumes:
      - application/json
      description: Retrieves paginated category products optionally filtered by search
        term
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: pageSize
        type: integer
      - description: Search term to filter categories by name
        in: query
        name: searchTerm
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get list of category products
      tags:
      - category-products
    post:
      consumes:
      - application/json
      description: Create a new category product with the provided information. Can
        be a root category or child category.
      parameters:
      - description: Category Product data
        in: body
        name: categoryProduct
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryProductCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CategoryProduct'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Create a new category product
      tags:
      - category-products
  /v1/api/category-products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category product by its ID. Cannot delete categories that
        have child categories.
      parameters:
      - description: Category Product ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete a category product
      tags:
      - category-products
    get:
      consumes:
      - application/json
      description: Retrieve a specific category product by its ID
      parameters:
      - description: Category Product ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CategoryProduct'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get category product by ID
      tags:
      - category-products
    put:
      consumes:
      - application/json
      description: Update an existing category product with new information. Validates
        parent-child relationships and prevents circular references.
      parameters:
      - description: Category Product ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      - description: Updated category product data
        in: body
        name: categoryProduct
        required: true
        schema:
          $ref: '#/definitions/model.CategoryProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CategoryProduct'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Update a category product
      tags:
      - category-products
  /v1/api/category-products/parent/{parentId}:
    get:
      consumes:
      - application/json
      description: Retrieve all child categories of a specific parent category
      parameters:
      - description: Parent Category ID (UUID format)
        in: path
        name: parentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CategoryProduct'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get categories by parent ID
      tags:
      - category-products
  /v1/api/category-products/root:
    get:
      consumes:
      - application/json
      description: Retrieve all root categories (categories without parent)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CategoryProduct'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get root categories
      tags:
      - category-products
  /v1/api/category-products/tree:
    get:
      consumes:
      - application/json
      description: Retrieve all categories organized in a hierarchical tree structure
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CategoryProduct'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get category tree structure
      tags:
      - category-products
  /v1/api/offices:
    get:
      consumes:
      - application/json
      description: Retrieves paginated offices optionally filtered by search term
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      - description: Search term
        in: query
        name: searchTerm
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get list of offices
      tags:
      - offices
    post:
      consumes:
      - application/json
      description: Create a new office with the provided information
      parameters:
      - description: Office data
        in: body
        name: office
        required: true
        schema:
          $ref: '#/definitions/model.Office'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Office'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Create a new office
      tags:
      - offices
  /v1/api/offices/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an office by its ID
      parameters:
      - description: Office ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete an office
      tags:
      - offices
    get:
      consumes:
      - application/json
      description: Retrieve a specific office by its ID
      parameters:
      - description: Office ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Office'
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get office by ID
      tags:
      - offices
    put:
      consumes:
      - application/json
      description: Update an existing office with new information
      parameters:
      - description: Office ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated office data
        in: body
        name: office
        required: true
        schema:
          $ref: '#/definitions/model.Office'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Office'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Update an office
      tags:
      - offices
  /v1/api/offices/active:
    get:
      consumes:
      - application/json
      description: Retrieve all offices with active status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Office'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get active offices
      tags:
      - offices
  /v1/api/products:
    get:
      consumes:
      - application/json
      description: Retrieves paginated products optionally filtered by search term
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10)'
        in: query
        name: pageSize
        type: integer
      - description: Search term to filter products by name or description
        in: query
        name: searchTerm
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get list of products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with the provided information. Category must
        exist and be valid. Request body should only contain category_id, not the
        full category object.
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product created successfully
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Validation error (invalid input or category not found)
          schema:
            properties:
              error:
                type: string
              success:
                type: boolean
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
              success:
                type: boolean
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
              success:
                type: boolean
            type: object
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - products
  /v1/api/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by its ID
      parameters:
      - description: Product ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Retrieve a specific product by its ID
      parameters:
      - description: Product ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product with new information. Category must
        exist and be valid. Request body should only contain category_id, not the
        full category object.
      parameters:
      - description: Product ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      - description: Updated product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Validation error (invalid input or category not found)
          schema:
            properties:
              error:
                type: string
              success:
                type: boolean
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
              success:
                type: boolean
            type: object
        "404":
          description: Product not found
          schema:
            properties:
              error:
                type: string
              success:
                type: boolean
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
              success:
                type: boolean
            type: object
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - products
  /v1/api/unit-products:
    get:
      consumes:
      - application/json
      description: Retrieves paginated unit products optionally filtered by search
        term
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10)'
        in: query
        name: pageSize
        type: integer
      - description: Search term to filter unit products by name
        in: query
        name: searchTerm
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get list of unit products
      tags:
      - unit-products
    post:
      consumes:
      - application/json
      description: Create a new unit product with the provided information
      parameters:
      - description: Unit Product data
        in: body
        name: unitProduct
        required: true
        schema:
          $ref: '#/definitions/model.UnitProduct'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.UnitProduct'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Create a new unit product
      tags:
      - unit-products
  /v1/api/unit-products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a unit product by its ID
      parameters:
      - description: Unit Product ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete a unit product
      tags:
      - unit-products
    get:
      consumes:
      - application/json
      description: Retrieve a specific unit product by its ID
      parameters:
      - description: Unit Product ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UnitProduct'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get unit product by ID
      tags:
      - unit-products
    put:
      consumes:
      - application/json
      description: Update an existing unit product with new information
      parameters:
      - description: Unit Product ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      - description: Updated unit product data
        in: body
        name: unitProduct
        required: true
        schema:
          $ref: '#/definitions/model.UnitProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UnitProduct'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Update a unit product
      tags:
      - unit-products
  /v1/api/warehouses:
    get:
      consumes:
      - application/json
      description: Retrieves paginated warehouses optionally filtered by search term
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get list of warehouses
      tags:
      - warehouses
    post:
      consumes:
      - application/json
      description: Create a new warehouse with the provided information
      parameters:
      - description: Warehouse data
        in: body
        name: warehouse
        required: true
        schema:
          $ref: '#/definitions/model.Warehouse'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Warehouse'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Create a new warehouse
      tags:
      - warehouses
  /v1/api/warehouses/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a warehouse by its ID
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete a warehouse
      tags:
      - warehouses
    get:
      consumes:
      - application/json
      description: Retrieve a specific warehouse by its ID
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Warehouse'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get warehouse by ID
      tags:
      - warehouses
    put:
      consumes:
      - application/json
      description: Update an existing warehouse with new information
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated warehouse data
        in: body
        name: warehouse
        required: true
        schema:
          $ref: '#/definitions/model.Warehouse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Warehouse'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Update a warehouse
      tags:
      - warehouses
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
